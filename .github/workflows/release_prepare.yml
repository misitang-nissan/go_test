name: 'Release: Prepare'
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Input release version without prefix "v"'
        required: true

jobs:
  create-release-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.NML_BACKEND_BOT_TOKEN }}
          fetch-depth: 0
          submodules: true

      - name: create release branch
        run: |
          git config --local user.name "${{ secrets.NML_BACKEND_BOT_USERNAME }}"
          git config --local user.email "${{ secrets.NML_BACKEND_BOT_USERNAME }}@nml-nkm"
          git checkout -b release/${{ github.event.inputs.version }}
          git push --set-upstream origin release/${{ github.event.inputs.version }}
      
      - name: Project Version Up 
        run: |
          sed -i -e 's/^const VERSION_NAME = "[0-9].[0-9].[0-9]"/const VERSION_NAME = "${{ github.event.inputs.version }}"/g' cmd/front-api/main.go
          rm -rf cmd/front-api/main.go-e
          git add .
          git commit --allow-empty -m "Bump up ngx front api version to ${{ github.event.inputs.version }}"
  
      - name: Create pull request
        env:
          GITHUB_TOKEN: ${{ secrets.NML_BACKEND_BOT_TOKEN }}
        run: |
          git push origin release/${{ github.event.inputs.version }}
          gh pr create --title "New Release ver${{ github.event.inputs.version }}" --body "Merge v${{ github.event.inputs.version }} to ${{ github.ref_name }}"
  
  create-github-release:
    runs-on: ubuntu-latest
    needs: create-release-branch
    steps:
      - name: Create a GitHub Release
        env:
          GH_TOKEN: ${{ secrets.NML_BACKEND_BOT_TOKEN }}
          GH_REPO: ${{ github.repository }}
          tag_name: ${{ github.event.inputs.version }}
        run: gh release create ${{ env.tag_name }} --generate-notes --draft --target release/${{ github.event.inputs.version }}
  
  setup-artifact-name:
    runs-on: 'ubuntu-latest'
    outputs:
        artifact_name: ${{ steps.step1.outputs.artifact_name }}
    env:
      tag_name: ${{ github.event.inputs.version }}
    steps: 
      - id: step1
        run: echo "artifact_name=build_output_${{ env.tag_name }}_$(date '+%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
  
  build-archive:
    needs: setup-artifact-name
    uses: ./.github/workflows/build_reusable.yml
    with:
      on_branch: ${{ github.action.ref.branch }}
      artifact_name: ${{ needs.setup-artifact-name.outputs.artifact_name }}

  upload-archive:
    needs: 
      - create-github-release
      - setup-artifact-name
      - build-archive
    uses: ./.github/workflows/upload_github_release_assets.yml
    with:
      release_tag: ${{ github.event.inputs.version }}
      artifact_name: ${{ needs.setup-artifact-name.outputs.artifact_name }}